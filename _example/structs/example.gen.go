// Code generated by plumage - DO NOT EDIT.

package structs

import (
	"fmt"
	"time"
)

type Base struct {
	ID_ example.ID
}

func (v Base) ID() example.ID {
	return v.ID_
}

type Child1 struct {
	ID_       example.ID
	Stringer_ fmt.Stringer
	Hoge_     time.Time
}

func (v Child1) ID() example.ID {
	return v.ID_
}

func (v Child1) Stringer() fmt.Stringer {
	return v.Stringer_
}

func (v Child1) Hoge() time.Time {
	return v.Hoge_
}

func (v Child1) Foo() {
	panic(fmt.Errorf("Not supported."))
}

func (v Child1) Bar(string) {
	panic(fmt.Errorf("Not supported."))
}

type Child2 struct {
	ID_   example.ID
	Fuga_ *string
	Piyo_ *time.Time
}

func (v Child2) ID() example.ID {
	return v.ID_
}

func (v Child2) Fuga() *string {
	return v.Fuga_
}

func (v Child2) Piyo() *time.Time {
	return v.Piyo_
}

func (v Child2) Baz() (string, string) {
	panic(fmt.Errorf("Not supported."))
}

type X struct {
	Int_              int
	StarInt_          *int
	IntList_          []int
	StarIntList_      []*int
	IntListList_      [][]int
	StarIntListList_  [][]*int
	Time_             time.Time
	StarTime_         *time.Time
	TimeList_         []time.Time
	StarTimeList_     []*time.Time
	TimeListList_     [][]time.Time
	StarTimeListList_ [][]*time.Time
	ID_               example.ID
	StarID_           *example.ID
	IDList_           []example.ID
	StarIDList_       []*example.ID
	IDListList_       [][]example.ID
	StarIDListList_   [][]*example.ID
	Base_             example.Base
	BaseList_         []example.Base
}

func (v X) Int() int {
	return v.Int_
}

func (v X) StarInt() *int {
	return v.StarInt_
}

func (v X) IntList() []int {
	return v.IntList_
}

func (v X) StarIntList() []*int {
	return v.StarIntList_
}

func (v X) IntListList() [][]int {
	return v.IntListList_
}

func (v X) StarIntListList() [][]*int {
	return v.StarIntListList_
}

func (v X) Time() time.Time {
	return v.Time_
}

func (v X) StarTime() *time.Time {
	return v.StarTime_
}

func (v X) TimeList() []time.Time {
	return v.TimeList_
}

func (v X) StarTimeList() []*time.Time {
	return v.StarTimeList_
}

func (v X) TimeListList() [][]time.Time {
	return v.TimeListList_
}

func (v X) StarTimeListList() [][]*time.Time {
	return v.StarTimeListList_
}

func (v X) ID() example.ID {
	return v.ID_
}

func (v X) StarID() *example.ID {
	return v.StarID_
}

func (v X) IDList() []example.ID {
	return v.IDList_
}

func (v X) StarIDList() []*example.ID {
	return v.StarIDList_
}

func (v X) IDListList() [][]example.ID {
	return v.IDListList_
}

func (v X) StarIDListList() [][]*example.ID {
	return v.StarIDListList_
}

func (v X) Base() example.Base {
	return v.Base_
}

func (v X) BaseList() []example.Base {
	return v.BaseList_
}

func NewBase(v example.Base) example.Base {
	if v == nil {
		return nil
	}
	switch t := v.(type) {
	case example.Child1:
		return NewChild1(t)
	case example.Child2:
		return NewChild2(t)
	default:
		return Base{
			ID_: v.ID(),
		}
	}
}

func NewBaseList(vs []example.Base) []example.Base {
	ret := make([]example.Base, 0, len(vs))
	for _, v := range vs {
		ret = append(ret, NewBase(v))
	}
	return ret
}

func NewChild1(v example.Child1) example.Child1 {
	if v == nil {
		return nil
	}
	switch v.(type) {
	default:
		return Child1{
			ID_:       v.ID(),
			Stringer_: v.Stringer(),
			Hoge_:     v.Hoge(),
		}
	}
}

func NewChild1List(vs []example.Child1) []example.Child1 {
	ret := make([]example.Child1, 0, len(vs))
	for _, v := range vs {
		ret = append(ret, NewChild1(v))
	}
	return ret
}

func NewChild2(v example.Child2) example.Child2 {
	if v == nil {
		return nil
	}
	switch v.(type) {
	default:
		return Child2{
			ID_:   v.ID(),
			Fuga_: v.Fuga(),
			Piyo_: v.Piyo(),
		}
	}
}

func NewChild2List(vs []example.Child2) []example.Child2 {
	ret := make([]example.Child2, 0, len(vs))
	for _, v := range vs {
		ret = append(ret, NewChild2(v))
	}
	return ret
}

func NewX(v example.X) example.X {
	if v == nil {
		return nil
	}
	switch v.(type) {
	default:
		return X{
			Int_:              v.Int(),
			StarInt_:          v.StarInt(),
			IntList_:          v.IntList(),
			StarIntList_:      v.StarIntList(),
			IntListList_:      v.IntListList(),
			StarIntListList_:  v.StarIntListList(),
			Time_:             v.Time(),
			StarTime_:         v.StarTime(),
			TimeList_:         v.TimeList(),
			StarTimeList_:     v.StarTimeList(),
			TimeListList_:     v.TimeListList(),
			StarTimeListList_: v.StarTimeListList(),
			ID_:               v.ID(),
			StarID_:           v.StarID(),
			IDList_:           v.IDList(),
			StarIDList_:       v.StarIDList(),
			IDListList_:       v.IDListList(),
			StarIDListList_:   v.StarIDListList(),
			Base_:             NewBase(v.Base()),
			BaseList_:         NewBaseList(v.BaseList()),
		}
	}
}

func NewXList(vs []example.X) []example.X {
	ret := make([]example.X, 0, len(vs))
	for _, v := range vs {
		ret = append(ret, NewX(v))
	}
	return ret
}
